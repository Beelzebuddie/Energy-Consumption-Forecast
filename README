# Energy Demand Forecasting Project

## Overview
This project focuses on forecasting energy demand in the United States using various statistical and machine learning methods. The primary objective is to analyze nuclear energy consumption trends and forecast future demand using Exponential Smoothing, ARIMA, XGBoost, and Random Forest models.

---

## Project Structure

```
energy-demand-forecasting/
├── data/
│   ├── raw/
│   │   └── use_all_btu.csv
│   └── processed/
│       └── use_all_btu_with_descriptions.csv
├── docs/
│   └── msn_codes_and_descriptions.xlsx
├── notebooks/
│   └── energy_forecasting.ipynb
└── README.md
```

---

## Data Description

### Main Dataset
- **File**: `use_all_btu.csv`
- **Rows**: 14,773
- **Columns**: 66
- **Features**:
  - `Data_Status`: Status of the data (e.g., Final, Preliminary).
  - `State`: U.S. state codes.
  - `MSN`: Energy type or activity codes.
  - `1960 - 2022`: Yearly energy consumption in Billion BTU.

### MSN Descriptions
- **File**: `msn_codes_and_descriptions.xlsx`
- **Sheets**:
  - `MSN descriptions`: Provides descriptions and units for MSN codes.

---

## Steps and Methodology

### 1. Data Preprocessing
- Loaded and explored the raw dataset.
- Handled missing values, especially in early years (1960–1969).
- Merged `use_all_btu.csv` with MSN descriptions for better interpretability.
- Converted data to a long format using `pd.melt` for time-series analysis.

### 2. Nuclear Energy Focus
- Filtered data to focus on nuclear energy (`MSN` code: `NUEGB`).
- Conducted state-wise and national-level analysis.
- Plotted trends for top states and the national total.

### 3. Forecasting Approaches

#### Exponential Smoothing
- Applied to national nuclear consumption data.
- Forecasted the next 5 years.
- Metrics: 
  - MAE: Mean Absolute Error
  - RMSE: Root Mean Squared Error

#### Auto ARIMA
- Automatically selected ARIMA parameters.
- Compared forecasts with actual data.
- Provided model summaries for transparency.

#### Machine Learning Models
- Created lagged features for supervised learning.
- **Models Used**:
  - XGBoost Regressor
  - Random Forest Regressor
- Evaluated using:
  - MAE
  - RMSE
  - MAPE (Mean Absolute Percentage Error)

---

## Results

| Model             | MAE    | RMSE   | MAPE (%) |
|-------------------|--------|--------|----------|
| Exponential Smoothing | ~Value | ~Value | ~Value    |
| Auto ARIMA        | ~Value | ~Value | ~Value    |
| XGBoost           | ~Value | ~Value | ~Value    |
| Random Forest     | ~Value | ~Value | ~Value    |

*Values to be filled after running the notebook.*

---

## Requirements

### Python Libraries
- `pandas`
- `numpy`
- `matplotlib`
- `xgboost`
- `scikit-learn`
- `statsmodels`
- `pmdarima`

### Installation
```bash
pip install pandas numpy matplotlib xgboost scikit-learn statsmodels pmdarima
```

---

## How to Run

1. Clone the repository:
   ```bash
   git clone https://github.com/yourusername/energy-demand-forecasting.git
   ```

2. Navigate to the project folder:
   ```bash
   cd energy-demand-forecasting
   ```

3. Run the notebook:
   ```bash
   jupyter notebook notebooks/energy_forecasting.ipynb
   ```

4. Explore the visualizations and model evaluations.

---

## Visualizations
- **State-wise Trends**: Nuclear energy consumption trends in California, Texas, and other top states.
- **National Trends**: Overall U.S. nuclear energy consumption.
- **Forecast Comparisons**: Actual vs. predicted consumption using different models.

---

## Future Work
- Incorporate additional energy sources for holistic demand forecasting.
- Integrate seasonal decomposition for enhanced ARIMA modeling.
- Explore deep learning models (e.g., LSTM, GRU) for improved long-term forecasts.

---

## License
This project is open-source and available under the [MIT License](LICENSE).

---

## Contact
For questions or suggestions, please contact:  
**Matheus Castro Pamato**  
*Aspiring Data Scientist in the Nuclear Sector*  
[LinkedIn](#) | [Email](#)

---

## Acknowledgements
- Data sourced from U.S. Energy Information Administration (EIA).
- Libraries: `pmdarima`, `statsmodels`, `xgboost`, `scikit-learn`.